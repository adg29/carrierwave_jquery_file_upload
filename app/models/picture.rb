class Picture < ActiveRecord::Base
  include Rails.application.routes.url_helpers
  validates_presence_of :title, :description, :file
  mount_uploader :file, ImageUploader
=begin
  require "digest"	# Required for md5 hashing
  require "httparty"	# Required for posting to moderation service

  # ActiveRecord hook
  after_save :send_for_moderation

  # Send information to moderator
  # REQUIRED FIELDS
  # seed 			str The seed is the current timestamp in milliseconds since epoch
  # hash__value			str The hash value is the MD5 hash of the secret key (assigned by LW) concatenated with the seed
  # subject			str The subject of post, caption of images, title of video, etc (we use this for the title)
  # body			str The body of post, description of image or video, etc.  Optional for images and video. (we use this for the description)
  # content__id			str The unique id of this content, generated by us...use our pictures table id
  # author__id			str The username of the author
  # tracking__id		str The id for this specific request.  It is very important that all requests have unique tracking ids.
  # content__time__stamp	lon The timestamp that this content was created
  # systemId			str A constant assigned by LW (value is Intel_UAT)
  # customerId			str A constant assigned by LW (value is Intel)
  # id				lon A positive number.  We recommend using the same timestamp as the seed.
  # status 			int Always send 0 (zero)
  # OPTIONAL FIELDS
  # content__url		str For images or video, the url to the image or video.  For text, the url to view the content in context.
  # locale			str The locale in standard ISO format.  Default is en_US.
  # modserver.url=modserver-v1-11-uat.stage.liveworld.com

  # private (??)
  def send_for_moderation
    # Configuration values
    lw_system_id = 'Intel_UAT'
    lw_customer_id = 'Intel'
    lw_secret_key = 123456
    # Instance values
    lw_seed = lw_id = lw_content_time_stamp = created_at.to_time.to_i
    lw_hash_value = Digest::MD5.hexdigest("#{lw_secret_key}#{lw_seed}")
    lw_subject = title
    lw_body = description
    lw_content_id = id
    lw_author_id = 0	# Need to pull the user (facebook) id for the user submitting the content HARDCODED
    now = Time.now.to_i # To enforce unique on the tracking id, use the current timestamp and not the created_on value (??)
    lw_tracking_id = "#{id}_#{now}"
    lw_content_url = file.url 
    lw_locale = "en_US" # Need to get locale along with user HARDCODED

    xml = "<com.liveworld.moderation.web.struts.rest.ModerationContent>
    <seed><![CDATA[#{lw_seed}]]></seed>
    <hash__value><![CDATA[#{lw_hash_value}]]></hash__value>
    <subject><![CDATA[#{lw_subject}]]></subject>
    <body><![CDATA[#{lw_body}]]></body>
    <content__id><![CDATA[#{lw_content_id}]]></content__id>
    <author__id><![CDATA[#{lw_author_id}]]></author__id>
    <locale><![CDATA[#{lw_locale}]]></locale>
    <system__id><![CDATA[#{lw_system_id}]]></system__id>
    <tracking__id><![CDATA[#{lw_tracking_id}]]></tracking__id>
    <content__time__stamp><![CDATA[#{lw_content_time_stamp}]]></content__time__stamp>
    <customer__id><![CDATA[#{lw_customer_id}]]></customer__id>
    </com.liveworld.moderation.web.struts.rest.ModerationContent>"

    logger.info("after_save FIRED XML is #{xml}")

    rsp = HTTParty.post("http://modserver-v1-11-uat.stage.liveworld.com/EndPointClientAxis2/rest/moderation_contents.xml", :body => xml)

    logger.info(rsp.parsed_response)
  end
=end
  #one convenient method to pass jq_upload the necessary information
  def to_jq_upload
  {
    "id" => read_attribute(:id),
    "title" => read_attribute(:title),
    "description" => read_attribute(:description),
    "name" => read_attribute(:file),
    "size" => file.size,
    "url" => file.url,
    "thumbnail_url" => file.thumb.url,
    "delete_url" => picture_path(:id),
    "delete_type" => "DELETE" 
   }
  end
end
